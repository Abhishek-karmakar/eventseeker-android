/*     * Copyright (c) 2014 Samsung Electronics Co., Ltd.    * All rights reserved.    *    * Redistribution and use in source and binary forms, with or without    * modification, are permitted provided that the following conditions are    * met:    *    *     * Redistributions of source code must retain the above copyright    *        notice, this list of conditions and the following disclaimer.   *     * Redistributions in binary form must reproduce the above   *       copyright notice, this list of conditions and the following disclaimer   *       in the documentation and/or other materials provided with the   *       distribution.   *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its   *       contributors may be used to endorse or promote products derived from   *       this software without specific prior written permission.   *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package com.wcities.eventseeker.gear.service;import java.io.IOException;import java.util.HashMap;import org.json.JSONException;import org.json.JSONObject;import android.content.Intent;import android.os.Binder;import android.os.IBinder;import android.util.Log;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.SA;import com.samsung.android.sdk.accessory.SAAgent;import com.samsung.android.sdk.accessory.SAPeerAgent;import com.samsung.android.sdk.accessory.SASocket;import com.wcities.eventseeker.app.EventSeekr;import com.wcities.eventseeker.gear.api.SG2ApiFactory;import com.wcities.eventseeker.gear.interfaces.SG2Api;import com.wcities.eventseeker.gear.interfaces.SG2Api.SG2ApiCallType;public class SG2AccessoryProviderService extends SAAgent {		public static final String TAG = SG2AccessoryProviderService.class.getSimpleName();	private static final int SG2ACCESSORY_CHANNEL_ID = 104;	HashMap<Integer, SG2AccessoryProviderConnection> mConnectionsMap = null;	private final IBinder mBinder = new LocalBinder();	public class LocalBinder extends Binder {		public SG2AccessoryProviderService getService() {			return SG2AccessoryProviderService.this;		}	}	public SG2AccessoryProviderService() {		super(TAG, SG2AccessoryProviderConnection.class);	}	public class SG2AccessoryProviderConnection extends SASocket {		private int mConnectionId;		public SG2AccessoryProviderConnection() {			super(SG2AccessoryProviderConnection.class.getName());		}		@Override		public void onError(int channelId, String errorString, int error) {			Log.e(TAG, "Connection is not alive ERROR: " + errorString + "  "					+ error);		}		@Override		public void onReceive(int channelId, byte[] data) {			Log.d(TAG, "onReceive");			//final String callType = new String(data);			JSONObject jsonObject;			try {				jsonObject = new JSONObject(new String(data));				Log.d(TAG, "callType = " + jsonObject.toString());								final String callType = jsonObject.getString("callType");				final int eventIndex = jsonObject.optInt("eventIndex", SG2ApiFactory.NOT_SPECIFIED);				new Thread(new Runnable() {					public void run() {						SG2AccessoryProviderConnection uHandler = mConnectionsMap.get(Integer								.parseInt(String.valueOf(mConnectionId)));						if (uHandler == null) {							Log.e(TAG,"Error, can not get SG2AccessoryProviderConnection handler");							return;						}												SG2Api sg2Api = SG2ApiFactory.getSG2ApiInstance((EventSeekr) getApplication(), 								SG2ApiCallType.getCallType(callType), eventIndex);						byte[] message = sg2Api.execute(eventIndex);												if (message != null) {							try {								uHandler.send(SG2ACCESSORY_CHANNEL_ID, message);															} catch (IOException e) {								e.printStackTrace();							}						}					}				}).start();							} catch (JSONException e1) {				e1.printStackTrace();			}		}		@Override		protected void onServiceConnectionLost(int errorCode) {			Log.e(TAG, "onServiceConectionLost  for peer = " + mConnectionId + "error code =" + errorCode);			if (mConnectionsMap != null) {				mConnectionsMap.remove(mConnectionId);				SG2ApiFactory.clearMap();			}		}	}    @Override    public void onCreate() {        super.onCreate();        Log.i(TAG, "onCreate of smart view Provider Service");                SA mAccessory = new SA();        try {        	mAccessory.initialize(this);        } catch (SsdkUnsupportedException e) {        	// Error Handling        } catch (Exception e1) {            Log.e(TAG, "Cannot initialize Accessory package.");            e1.printStackTrace();			/*			 * Your application can not use Accessory package of Samsung			 * Mobile SDK. You application should work smoothly without using			 * this SDK, or you may want to notify user and close your app			 * gracefully (release resources, stop Service threads, close UI			 * thread, etc.)			 */            stopSelf();        }    }	    @Override     protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {     	Log.d(TAG, "onServiceConnectionRequested()");        acceptServiceConnectionRequest(peerAgent);     }     	@Override	protected void onFindPeerAgentResponse(SAPeerAgent arg0, int arg1) {		// TODO Auto-generated method stub		Log.d(TAG, "onFindPeerAgentResponse  arg1 =" + arg1);	}	@Override	protected void onServiceConnectionResponse(SASocket thisConnection, int result) {		Log.d(TAG, "onServiceConnectionResponse()");		if (result == CONNECTION_SUCCESS) {			Log.d(TAG, "CONNECTION_SUCCESS");			if (thisConnection != null) {				SG2AccessoryProviderConnection myConnection = (SG2AccessoryProviderConnection) thisConnection;				if (mConnectionsMap == null) {					mConnectionsMap = new HashMap<Integer, SG2AccessoryProviderConnection>();				}				myConnection.mConnectionId = (int) (System.currentTimeMillis() & 255);				Log.d(TAG, "onServiceConnection connectionID = " + myConnection.mConnectionId);				mConnectionsMap.put(myConnection.mConnectionId, myConnection);			} else {				Log.e(TAG, "SASocket object is null");			}					} else if (result == CONNECTION_ALREADY_EXIST) {			Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");					} else {			Log.e(TAG, "onServiceConnectionResponse result error =" + result);		}	}	@Override	public IBinder onBind(Intent arg0) {		return mBinder;	}}